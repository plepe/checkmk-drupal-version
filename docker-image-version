#!/bin/bash
for CONTAINER in $(docker ps -aq) ; do
  IMAGE=$(docker inspect "${CONTAINER}" | jq -r '.[0].Image')
  if [ "${IMAGE}" = "" ] ; then continue ; fi

  DIGEST=$(docker inspect "${IMAGE}" | jq -r '.[0].RepoDigests[0]')
  if [ "${DIGEST}" = "" ] ; then continue ; fi

  NAME=$(echo "${DIGEST}" | cut -d'@' -f1)
  if [ "${NAME}" = "" ] ; then continue ; fi
  if [ "${NAME}" = "null" ] ; then continue ; fi

  if ! [[ ${NAME} =~ "/" ]] ; then
    NAME="library/${NAME}"
  fi

  IS_ONLINE=$(docker ps --format '{{.Image}}' | grep -Fx "${NAME}")
  if [ "${IS_ONLINE}" = "" ] ; then
    ERROR_VAL=0
    ERROR_ADD=' (container not running)'
  else
    ERROR_VAL=1
    ERROR_ADD=''
  fi

  VERSION_HASH=$(echo "${DIGEST}" | cut -d'@' -f2)
  if [ "${VERSION_HASH}" = "" ] ; then continue ; fi

  DOCKER_HUB=$(curl -s https://hub.docker.com/v2/repositories/${NAME}/tags?page_size=100)

  HAS_MESSAGE=$(echo $DOCKER_HUB | jq -r ".message")
  if [ "${HAS_MESSAGE}" != "null" ] ; then
    echo "${ERROR_VAL} \"Docker image ${NAME}\" - Error: ${HAS_MESSAGE}${ERROR_ADD}"
    continue
  fi

  VERSION=$(echo $DOCKER_HUB | jq -r ".results[] | select(.digest == \"${VERSION_HASH}\").name" | tail -n1)
  if [ "${VERSION}" = "" ] ; then
    echo "${ERROR_VAL} \"Docker image ${NAME}\" - Can't resolve version (too old?)${ERROR_ADD}"
    continue
  fi

  ARCH=$(echo $DOCKER_HUB | jq -r ".results[] | select(.digest == \"${VERSION_HASH}\").images[0].architecture" | tail -n1)

  LATEST_HASH=$(echo ${DOCKER_HUB} | jq -r ".results[] | select(.images[0].architecture == \"${ARCH}\") | .digest" | head -n1)
  if [ "${VERSION_HASH}" = "${LATEST_HASH}" ] ; then
    echo "0 \"Docker image ${NAME}\" - Current version: ${VERSION}"
  else
    LATEST=$(echo $DOCKER_HUB | jq -r ".results[] | select(.digest == \"${LATEST_HASH}\").name" | tail -n1)
    echo "${ERROR_VAL} \"Docker image ${NAME}\" - Current version: ${VERSION}, available: ${LATEST}${ERROR_ADD}"
  fi
done

if [ ! -f /etc/check_mk/docker-image-version.cfg ] ; then
  exit 0
fi

IMAGES=$(cat /etc/check_mk/docker-image-version.cfg)
for NAME in $IMAGES ; do
  ERROR_VAL=1
  ERROR_ADD=""

  VERSION_HASH=$(docker image ls --format '{{.Digest}}' "${NAME}")
  if [ "${VERSION_HASH}" = "" ] ; then
    echo "${ERROR_VAL} \"Docker image ${NAME}\" - Can't get digest${ERROR_ADD}"
    continue
  fi

  DOCKER_HUB=$(curl -s https://hub.docker.com/v2/repositories/${NAME}/tags?page_size=100)

  HAS_MESSAGE=$(echo $DOCKER_HUB | jq -r ".message")
  if [ "${HAS_MESSAGE}" != "null" ] ; then
    echo "${ERROR_VAL} \"Docker image ${NAME}\" - Error: ${HAS_MESSAGE}${ERROR_ADD}"
    continue
  fi

  VERSION=$(echo $DOCKER_HUB | jq -r ".results[] | select(.digest == \"${VERSION_HASH}\").name" | tail -n1)
  if [ "${VERSION}" = "" ] ; then
    echo "${ERROR_VAL} \"Docker image ${NAME}\" - Can't resolve version (too old?)${ERROR_ADD}"
    continue
  fi

  ARCH=$(echo $DOCKER_HUB | jq -r ".results[] | select(.digest == \"${VERSION_HASH}\").images[0].architecture" | tail -n1)

  LATEST_HASH=$(echo ${DOCKER_HUB} | jq -r ".results[] | select(.images[0].architecture == \"${ARCH}\") | .digest" | head -n1)
  if [ "${VERSION_HASH}" = "${LATEST_HASH}" ] ; then
    echo "0 \"Docker image ${NAME}\" - Current version: ${VERSION}"
  else
    LATEST=$(echo $DOCKER_HUB | jq -r ".results[] | select(.digest == \"${LATEST_HASH}\").name" | tail -n1)
    echo "${ERROR_VAL} \"Docker image ${NAME}\" - Current version: ${VERSION}, available: ${LATEST}${ERROR_ADD}"
  fi
done
